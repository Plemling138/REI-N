*********************************
Realtime Embedded Infrastructure
             with Network Kernel
*********************************
Copyright(C)2010-13 Plemling138

・概要
「Realtime Embedded Infrastructure with Network Kernel（以下，REI-N）」は，私が高専ロボコンに参加していた頃に開発した
UDPパケットを介してロボットを制御するためのシステムです．
システムのベースには簡易自作組み込みOS「KOZOS」を使用し，解説書「12ステップで作る組込みOS自作入門」に記述されているソースコードに
DRAM展開やイーサネット機能，UDPプロトコル解析機能などを追加し，さらにROM化を行って実際のロボコンでも使用していたものです．

名前の由来は，私のハンドルネーム（玲）に，適当にそれっぽい単語をあてはめて作った，ただそれだけのことです．特に深い意味があるわけではないです（笑）．

本当は開発した年に公開したかったのですが，つい作業の忙しさに取り紛れてついにこの時まで放置してしまいました．その間に高専ロボコンでは
無線制御のルールがなくなってしまいましたが，「IP通信でロボットを動かす」ことの足がかりや，KOZOSの応用例として，半ば「遺産」のような形ではありますが
こうして公開することにしました．

・システムの解説（概略）
基本的なシステム部分は本家KOZOSのサイト（http://kozos.jp/）および「12ステップで作る組込みOS自作入門」をご覧ください．
一部の変数名の変更を除き，基本部分は全てKOZOSに準拠しています（koz～をrei～と読みかえれば基本的に大丈夫なはずです）．
2つのディレクトリは，「sender」が送信側（コントローラ）用，「receiver」が受信側（ロボット）になっていて，receiverは直接ロボットを動かすのではなく，
UART通信（H8/3069で言う3ピンのUART）で他のマイコンにデータを送って動かす形になっています．
#もちろん，IOにアクセスしてロボットを動かすこともできます:)

通信の部分に関しては，以下のソースコードを変更することで改変が可能です．
・send.c…データ送信タスク
・recv.c…データ受信タスク
・usertask.c…送受信したデータの処理タスク
最低限のポイントはソースコード中に明記してありますが，なにぶん開発したのがコーディングに不慣れな時期だったこともあり，変な実装も多々見られます
（先の変数名の変更のような点も含めて）．

通信に関しては，KOZOSサイトで公開されていたソースコードから若干変更して自身のMACアドレスを取得できるようになっています．ただし，送信先のMACアドレスを
解決する手段を持っていない（ARP応答のみ実装）ので，現状送信側は静的に相手先のMACアドレスを割り当てるようになっています．
デフォルトのIPアドレスは，senderで「192.168.1.16」，receiverで「192.168.1.17」に設定されています．

また，ROM化済みですのでKOZOS標準のローダを使用せずにスタンドアロンで実行出来ます．

・その他
-UDPパケットを使用しているので，送信側をAndroidやiOSなどにしてロボットを制御することもできます（http://d.hatena.ne.jp/Plemling/20111127/p1）
-ライセンスはKOZOSのライセンス「KL-01」に準拠します．
-Makefileなどは環境に合わせて変更をお願いします．
-このシステムを使用したことによるいかなる事故，損害について開発者は一切責任をもちません．使用に際しては自己責任でお願い致します．
-開発から数年が経過して開発者本人も忘れている点が多々あるので，あまり満足なサポートは出来ないかもしれませんが，
 「ここってどういうこと？」などの質問にはお答え出来ますので，何かありましたらplemling138+koz@gmail.comまでご連絡ください．
  少なくともこのバージョンからアップデートされることはおそらくありません．あくまで参考程度にご覧いただけると幸いです．