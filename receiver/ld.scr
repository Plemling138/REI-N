OUTPUT_FORMAT("elf32-h8300")
OUTPUT_ARCH(h8300h)
ENTRY("_start")

MEMORY
{
/* Internal ROM(512KB) */
	romall(rx)			: o = 0x000000, l = 0x080000 /*512kb*/
	vectors(r)			: o = 0x000000, l = 0x000100 /*Top of ROM*/
	rom(rx)					: o = 0x040000, l = 0x07ff00 

/*DRAM(2MB)*/
	dramall(rwx)		: o = 0x400000, l = 0x200000
	ram(rwx)				: o = 0x400000 + 0x100, l = 0x200000 - 0x100

/*Internal RAM(16KB)*/
	ramall(rwx)   	: o = 0xffbf20, l = 0x004000 /*16kb*/
	softvec(rw)			: o = 0xffbf20, l = 0x000040 /*Top of RAM*/ /*Area of Software interrupt vector*/
	userstack(rw)		: o = 0xffc000, l = 0x003f00 /*User stack*/
	bootstack(rw)		: o = 0xffff00, l = 0x000000 /*Boot stack*/
	intrstack(rw)		: o = 0xffff00, l = 0x000000 /*Interrupt stack*/
}

SECTIONS
{
	.vectors : {
		vector.o(.data)
	} > vectors

  .softvec : {
		_softvec = . ;
	} > softvec

	.text : {
	  _text_start = . ; /*Start text area*/
		*(.text)
		_etext = . ; /*End text area*/
	} > rom

	.rodata : {
		_rodata_start = . ; /*Start Read-only data*/
		*(.strings)
		*(.rodata)
		*(.rodata.*)
		_erodata = . ; /*End Read-only data*/
	} > rom

	.data : {
	  _data_start = . ; /*Start data area*/
		*(.data)
		_edata = . ; /*End of data area*/
	} > ram AT> rom

	.bss : {
		_bss_start = . ; /*Start BSS area*/
		*(.bss)
		*(COMMON)
		_ebss = . ; /*End of BSS area*/
	} > ram

	. = ALIGN(4);
	_end = . ;

	.freearea  : {
		 _freearea = . ;
	} > ram

	.userstack : {
	       	 _userstack = . ;
	} > userstack

	.bootstack : {
	       	 _bootstack = . ;
	} > bootstack

	.intrstack : {
	       	 _intrstack = . ;
	} > intrstack
}
